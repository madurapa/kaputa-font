@BASE = [ sinBa sinBha sinCa sinCha sinDa sinDda sinDdha sinDha sinE sinEe sinFa sinGa sinGha sinHa sinI sinIi sinJa sinJha sinJnya sinKa sinKha sinLa sinLla sinMa sinMba sinNa sinNda sinNdja sinNga sinNna sinNndda sinNnga sinNya sinPa sinPha sinRa sinSa sinSha sinSsa sinTa sinTha sinTta sinTtha sinVa sinVocalicR sinVocalicRr sinVocalicl sinVocalicll sinYa sinDa.rakar sinKa.half sinNa.half sinNda.rakar sinTa.half ];

@MARKS = [ sinMatraI sinMatraIi sinMatraU sinMatraUu sinVirama sinMatraI.alt sinMatraI.alt1 sinMatraI.alt2 sinMatraI.empty sinMatraIi.alt sinMatraIi.alt1 sinMatraIi.alt2 sinMatraIi.empty sinMatraU.alt sinMatraUu.alt sinVirama.alt sinVirama.attatch sinVirama.touch sinMatraEe.sechalf ];

# Prefix: Languagesystems
languagesystem DFLT dflt;
languagesystem sinh dflt;

# Prefix: Prefix
# automatic
# GSUB
lookup akhnAkhandinSinhalalookup7 {
  lookupflag 0;
    sub sinVirama zerowidthjoiner by sinVirama.attatch;
} akhnAkhandinSinhalalookup7;

lookup akhn_02 {
  lookupflag 0;
    sub sinKa' sinVirama.attatch sinSsa by sinKa.half;
   	sub sinKa' sinVirama.attatch sinVa by sinKa.half;
   	sub sinKa' sinVirama.attatch sinVa by sinKa.half;
    sub sinTa' sinVirama.attatch sinVa by sinTa.half;
    sub sinTa' sinVirama.attatch sinVa by sinTa.half;
   	sub sinTa' sinVirama.attatch sinTha by sinTa.half;
	sub sinNa' sinVirama.attatch sinDa by sinNa.half;
	sub sinNa' sinVirama.attatch sinVa by sinNa.half;
	sub sinNa' sinVirama.attatch sinTha by sinNa.half;

} akhn_02;
lookup rphf0 {
  lookupflag 0;
    sub sinRa sinVirama.attatch by sinReph;
} rphf0;

lookup rphf1 {
  lookupflag 0;
    sub sinVirama.attatch sinRa  by sinRakar;
} rphf1;

lookup vatu1 {
  lookupflag 0;
    sub sinVirama.attatch sinYa  by sinYa.post;
} vatu1;

lookup pstf1 {
  lookupflag 0;
    sub sinMatraE sinVirama  by sinMatraEe;
    sub sinMatraE sinMatraE  by sinMatraAi;
    sub sinMatraE sinMatraAa  by sinMatraO;
    sub sinMatraE sinMatraAa sinVirama  by sinMatraOo;
    sub sinMatraAa sinVirama  by sinMatraOo.sechalf;
    sub sinMatraE sinMatraLs  by sinMatraAu;
    sub sinMatraR sinMatraR  by sinMatraRr;
} pstf1;

lookup rphf4 {
  lookupflag 0;
    sub sinA sinMatraAa  by sinAa;
    sub sinA sinMatraAe  by sinAae;
    sub sinA sinMatraAae  by sinAe;
    sub sinU sinMatraLs  by sinUu;
    sub sinVocalicR sinMatraR  by sinVocalicRr;
    sub sinO sinVirama  by sinOo;
    sub sinO sinMatraLs  by sinAu;
} rphf4;

lookup pstfPostBaseFormsinSinhalalookup5 {
  lookupflag 0;
    sub sinMatraEe by sinMatraEe.sechalf ;
    sub sinMatraO by sinMatraO.sechalf ;
    sub sinMatraOo by sinMatraOo.sechalf ;
    sub sinMatraAu by sinMatraAu.sechalf ;
} pstfPostBaseFormsinSinhalalookup5;

lookup pstsPostBaseSubstitutionsinSinhalalookup6 {
  lookupflag 0;
    sub sinRa sinMatraAe  by sinRAe;
    sub sinRa sinMatraAae  by sinRAae;

} pstsPostBaseSubstitutionsinSinhalalookup6;

lookup psts_01 {
  lookupflag 0;
    sub sinRa sinMatraU'  by sinMatraAe;
    sub sinRa sinMatraUu'  by sinMatraAae;

} psts_01;

lookup psts_02{
  lookupflag 0;
   sub [sinGa sinNnga sinKa sinTa sinBha sinSha] [sinMatraU ]'  by [sinMatraU.alt ];
   sub [sinGa sinNnga sinKa sinTa sinBha sinSha] [sinMatraUu ]'  by [sinMatraUu.alt ];

} psts_02;

lookup abvs_halant {
  lookupflag 0;
    sub [sinKha sinJha sinNga sinCa sinTta sinDda sinNndda sinDha sinBa sinMa sinMba sinVa] [sinVirama sinMatraEe.sechalf ]'  by [sinVirama.alt ];
} abvs_halant;

lookup abvs_halant_02 {
  lookupflag 0;
    sub [sinKha sinNga sinCa sinTta sinDda sinNndda sinDha sinBa sinMa sinMba sinVa] [sinRakar ] [sinVirama sinMatraEe.sechalf ]'  by [sinVirama.alt ];
} abvs_halant_02;

lookup abvs_matrai {
  lookupflag 0;
    sub [sinDa sinDa.rakar sinNda sinJnya sinNya sinLa sinYa.post] [sinMatraI sinMatraIi ]'  by [sinMatraI.alt sinMatraIi.alt ];
    sub [sinCha sinJa sinNdja] [sinMatraI sinMatraIi]'  by [sinMatraI.alt1 sinMatraIi.alt1 ];
    sub [sinTha sinPha sinTtha sinDdha ] [sinMatraI sinMatraIi]'  by [sinMatraI.alt2 sinMatraIi.alt2 ];
} abvs_matrai;

lookup abvsAboveBaseSubstitutionsinSinhalalookup8 {
  lookupflag 0;
    sub sinKha sinMatraI  by sinKhI;
    sub sinKha sinMatraIi  by sinKhIi;
    sub sinNga sinMatraI  by sinNgI;
    sub sinNga sinMatraIi  by sinNgIi;
    sub sinCa sinMatraI  by sinCI;
    sub sinCa sinMatraIi  by sinCIi;
    sub sinTta sinMatraI  by sinTtI;
    sub sinTta sinMatraIi  by sinTtIi;
    sub sinDda sinMatraI  by sinDdI;
    sub sinDda sinMatraIi  by sinDdIi;
    sub sinNndda sinMatraI  by sinNnddI;
    sub sinNndda sinMatraIi  by sinNnddIi;
    sub sinDha sinMatraI  by sinDhI;
    sub sinDha sinMatraIi  by sinDhIi;
    sub sinBa sinMatraI  by sinBI;
    sub sinBa sinMatraIi  by sinBIi;
    sub sinMa sinMatraI  by sinMI;
    sub sinMa sinMatraIi  by sinMIi;
    sub sinMba sinMatraI  by sinMbI;
    sub sinMba sinMatraIi  by sinMbIi;
    sub sinVa sinMatraI  by sinVI;
    sub sinVa sinMatraIi  by sinVIi;
    sub sinJha sinMatraI by sinJhI;
    sub sinJha sinMatraIi by sinJhIi;
    sub sinRa sinMatraI by sinRI;
    sub sinRa sinMatraIi by sinRIi;

} abvsAboveBaseSubstitutionsinSinhalalookup8;
lookup abvs_06{
  lookupflag 0;
    sub sinKha sinRakar sinMatraI'  by sinMatraI.empty;
    sub sinNga sinRakar sinMatraI'  by sinMatraI.empty;
    sub sinCa sinRakar sinMatraI'  by sinMatraI.empty;
    sub sinTta sinRakar sinMatraI'  by sinMatraI.empty;
    sub sinDda sinRakar sinMatraI'  by sinMatraI.empty;
    sub sinNndda sinRakar sinMatraI'  by sinMatraI.empty;
    sub sinDha sinRakar sinMatraI'  by sinMatraI.empty;
    sub sinBa sinRakar sinMatraI'  by sinMatraI.empty;
    sub sinMa sinRakar sinMatraI'  by sinMatraI.empty;
    sub sinMba sinRakar sinMatraI'  by sinMatraI.empty;
    sub sinVa sinRakar sinMatraI'  by sinMatraI.empty;
    sub sinJha sinRakar sinMatraI'  by sinMatraI.empty;
    sub sinKha sinRakar sinMatraIi'  by sinMatraIi.empty;
sub sinNga sinRakar sinMatraIi'  by sinMatraIi.empty;
sub sinCa sinRakar sinMatraIi'  by sinMatraIi.empty;
sub sinTta sinRakar sinMatraIi'  by sinMatraIi.empty;
sub sinDda sinRakar sinMatraIi'  by sinMatraIi.empty;
sub sinNndda sinRakar sinMatraIi'  by sinMatraIi.empty;
sub sinDha sinRakar sinMatraIi'  by sinMatraIi.empty;
sub sinBa sinRakar sinMatraIi'  by sinMatraIi.empty;
sub sinMa sinRakar sinMatraIi'  by sinMatraIi.empty;
sub sinMba sinRakar sinMatraIi'  by sinMatraIi.empty;
sub sinVa sinRakar sinMatraIi'  by sinMatraIi.empty;
sub sinJha sinRakar sinMatraIi'  by sinMatraIi.empty;

} abvs_06;

lookup abvs_07{
  lookupflag 0;
    sub sinKha' sinRakar sinMatraI.empty by sinKhI;
	sub sinNga' sinRakar sinMatraI.empty by sinNgI;
	sub sinCa' sinRakar sinMatraI.empty by sinCI;
	sub sinTta' sinRakar sinMatraI.empty by sinTtI;
	sub sinDda' sinRakar sinMatraI.empty by sinDdI;
	sub sinNndda' sinRakar sinMatraI.empty by sinNnddI;
	sub sinDha' sinRakar sinMatraI.empty by sinDhI;
	sub sinBa' sinRakar sinMatraI.empty by sinBI;
	sub sinMa' sinRakar sinMatraI.empty by sinMI;
	sub sinMba' sinRakar sinMatraI.empty by sinMbI;
	sub sinVa' sinRakar sinMatraI.empty by sinVI;
	sub sinJha' sinRakar sinMatraI.empty by sinJhI;
	sub sinKha' sinRakar sinMatraIi.empty by sinKhIi;
sub sinNga' sinRakar sinMatraIi.empty by sinNgIi;
sub sinCa' sinRakar sinMatraIi.empty by sinCIi;
sub sinTta' sinRakar sinMatraIi.empty by sinTtIi;
sub sinDda' sinRakar sinMatraIi.empty by sinDdIi;
sub sinNndda' sinRakar sinMatraIi.empty by sinNnddIi;
sub sinDha' sinRakar sinMatraIi.empty by sinDhIi;
sub sinBa' sinRakar sinMatraIi.empty by sinBIi;
sub sinMa' sinRakar sinMatraIi.empty by sinMIi;
sub sinMba' sinRakar sinMatraIi.empty by sinMbIi;
sub sinVa' sinRakar sinMatraIi.empty by sinVIi;
sub sinJha' sinRakar sinMatraIi.empty by sinJhIi;

} abvs_07;

lookup blwsBelowBaseSubstitutionsinSinhalalookup9{
  lookupflag 0;
    sub sinNya sinMatraU  by sinNyU;
    sub sinNya sinMatraUu  by sinNyUu;
    sub sinJnya sinMatraU  by sinJnyU;
    sub sinJnya sinMatraUu  by sinJnyUu;
    sub sinDa sinRakar  by sinDa.rakar;
    sub sinDa sinMatraU  by sinDU;
    sub sinDa sinMatraUu  by sinDUu;
    sub sinNda sinRakar  by sinNda.rakar;
    sub sinNda sinMatraU  by sinNdU;
    sub sinNda sinMatraUu  by sinNdUu;
    sub sinLa sinMatraU  by sinLU;
    sub sinLa sinMatraUu  by sinLUu;
    sub sinSha sinRakar sinMatraIi  by sinShRIi;
    sub sinLla sinMatraU  by sinLlU;
    sub sinLla sinMatraUu  by sinLlUu;
} blwsBelowBaseSubstitutionsinSinhalalookup9;

lookup sin_touching_1 {
  sub sinKa zerowidthjoiner sinVirama'  by sinVirama.touch;
  sub sinGa zerowidthjoiner sinVirama'  by sinVirama.touch;
  sub sinJa zerowidthjoiner sinVirama'  by sinVirama.touch;
  sub sinTta zerowidthjoiner sinVirama'  by sinVirama.touch;
  sub sinDda zerowidthjoiner sinVirama'  by sinVirama.touch;
  sub sinNna zerowidthjoiner sinVirama'  by sinVirama.touch;
  sub sinTa zerowidthjoiner sinVirama'  by sinVirama.touch;
  sub sinDa zerowidthjoiner sinVirama'  by sinVirama.touch;
  sub sinNa zerowidthjoiner sinVirama'  by sinVirama.touch;
  sub sinPa zerowidthjoiner sinVirama'  by sinVirama.touch;
  sub sinBa zerowidthjoiner sinVirama'  by sinVirama.touch;
  sub sinMa zerowidthjoiner sinVirama'  by sinVirama.touch;
  sub sinLa zerowidthjoiner sinVirama'  by sinVirama.touch;
  sub sinMa zerowidthjoiner sinVirama'  by sinVirama.touch;
  sub sinSa zerowidthjoiner sinVirama'  by sinVirama.touch;
  sub sinSha zerowidthjoiner sinVirama'  by sinVirama.touch;
  sub sinHa zerowidthjoiner sinVirama'  by sinVirama.touch;
  sub sinNga zerowidthjoiner sinVirama'  by sinVirama.touch;
  sub sinNya zerowidthjoiner sinVirama'  by sinVirama.touch;
  sub sinNga zerowidthjoiner sinVirama'  by sinVirama.touch;
  sub sinNga zerowidthjoiner sinVirama'  by sinVirama.touch;
} sin_touching_1;

lookup sin_touching_2 {
 pos sinKa' sinVirama.touch sinKa <0 0 -65 0> ;
 pos sinKa' sinVirama.touch sinTa <0 0 -75 0> ;
 pos sinKa' sinVirama.touch sinMa <0 0 -80 0> ;
 pos sinKa' sinVirama.touch <0 0 -50 0> ;
 pos sinGa' sinVirama.touch <0 0 -50 0> ;
 pos sinJa' sinVirama.touch <0 0 -50 0> ;
 pos sinTta' sinVirama.touch <0 0 -50 0> ;
 pos sinDda' sinVirama.touch <0 0 -50 0> ;
 pos sinNna' sinVirama.touch <0 0 -50 0> ;
 pos sinTa' sinVirama.touch <0 0 -50 0> ;
 pos sinDa' sinVirama.touch <0 0 -50 0> ;
 pos sinNa' sinVirama.touch <0 0 -50 0> ;
 pos sinPa' sinVirama.touch sinPa <0 0 -100 0> ;
 pos sinPa' sinVirama.touch <0 0 -50 0> ;
 pos sinBa' sinVirama.touch <0 0 -50 0> ;
 pos sinMa' sinVirama.touch <0 0 -50 0> ;
 pos sinLa' sinVirama.touch <0 0 -50 0> ;
 pos sinMa' sinVirama.touch <0 0 -50 0> ;
 pos sinSa' sinVirama.touch <0 0 -50 0> ;
 pos sinSha' sinVirama.touch <0 0 -50 0> ;
 pos sinHa' sinVirama.touch <0 0 -50 0> ;
 pos sinNga' sinVirama.touch <0 0 -50 0> ;
 pos sinNya' sinVirama.touch <0 0 -50 0> ;
 pos sinNga' sinVirama.touch <0 0 -50 0> ;
 pos sinNga' sinVirama.touch <0 0 -50 0> ;
} sin_touching_2;

#----------- Sinhala Numerals------------
#---------------------------------

lookup sin_lithnum_style {
	sub zero by sinZerolith;
	sub one by sinOnelith;
	sub two by sinTwolith;
	sub three by sinThreelith;
	sub four by sinFourlith;
	sub five by sinFivelith;
	sub six by sinSixlith;
	sub seven by sinSevenlith;
	sub eight by sinEightlith;
	sub nine by sinNinelith;
} sin_lithnum_style;

table GDEF {
  GlyphClassDef @BASE,,@MARKS,;
} GDEF;

feature vatu {
 script sinh;
     language dflt ;
      lookup rphf1;
      lookup rphf0;
      lookup vatu1;
} vatu;

feature pstf {
 script sinh;
     language dflt ;
      lookup pstf1;
      lookup pstfPostBaseFormsinSinhalalookup5;
} pstf;

feature psts {
 script sinh;
     language dflt ;
      lookup pstsPostBaseSubstitutionsinSinhalalookup6;
      lookup psts_01;
      lookup psts_02;
} psts;

feature akhn {
 script sinh;
     language dflt ;
      lookup akhnAkhandinSinhalalookup7;
      lookup akhn_02;
      lookup sin_touching_1;
      lookup sin_touching_2;
} akhn;

feature abvs {
 script sinh;
     language dflt ;
      lookup abvsAboveBaseSubstitutionsinSinhalalookup8;
      lookup abvs_06;
      lookup abvs_07;
      lookup abvs_halant;
      lookup abvs_matrai;
      lookup abvs_halant_02;
} abvs;

feature rphf {
 script sinh;
     language dflt ;
      lookup rphf4;
} rphf;

feature blws {
 script sinh;
     language dflt ;
      lookup blwsBelowBaseSubstitutionsinSinhalalookup9;
} blws;

feature ss06 {
  script sinh;
    language dflt ;
    lookup sin_lithnum_style;
} ss06;

feature aalt {
# automatic
feature lnum;
feature pnum;
feature tnum;
feature onum;
} aalt;

feature lnum {
# automatic
sub uni2219.osf by uni2219;
sub plus.osf by plus;
sub minus.osf by minus;
sub multiply.osf by multiply;
sub divide.osf by divide;
sub equal.osf by equal;
sub notequal.osf by notequal;
sub greater.osf by greater;
sub less.osf by less;
sub greaterequal.osf by greaterequal;
sub lessequal.osf by lessequal;
sub plusminus.osf by plusminus;
sub approxequal.osf by approxequal;
sub asciitilde.osf by asciitilde;
} lnum;

feature pnum {
# automatic
sub uni2219.tf by uni2219;
sub uni2215.tf by uni2215;
sub plus.tf by plus;
sub minus.tf by minus;
sub multiply.tf by multiply;
sub divide.tf by divide;
sub equal.tf by equal;
sub notequal.tf by notequal;
sub greater.tf by greater;
sub less.tf by less;
sub greaterequal.tf by greaterequal;
sub lessequal.tf by lessequal;
sub plusminus.tf by plusminus;
sub approxequal.tf by approxequal;
} pnum;

feature tnum {
# automatic
sub uni2219 by uni2219.tf;
sub uni2215 by uni2215.tf;
sub plus by plus.tf;
sub minus by minus.tf;
sub multiply by multiply.tf;
sub divide by divide.tf;
sub equal by equal.tf;
sub notequal by notequal.tf;
sub greater by greater.tf;
sub less by less.tf;
sub greaterequal by greaterequal.tf;
sub lessequal by lessequal.tf;
sub plusminus by plusminus.tf;
sub approxequal by approxequal.tf;
} tnum;

feature onum {
# automatic
sub uni2219 by uni2219.osf;
sub plus by plus.osf;
sub minus by minus.osf;
sub multiply by multiply.osf;
sub divide by divide.osf;
sub equal by equal.osf;
sub notequal by notequal.osf;
sub greater by greater.osf;
sub less by less.osf;
sub greaterequal by greaterequal.osf;
sub lessequal by lessequal.osf;
sub plusminus by plusminus.osf;
sub approxequal by approxequal.osf;
sub asciitilde by asciitilde.osf;
} onum;

